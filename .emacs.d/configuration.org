* Emacs configuration file

** Emacs internal settings

#+begin_src emacs-lisp
(setq inhibit-startup-message t) ; Don't show the splash screen
(tool-bar-mode -1)               ; Disable the tool bar
(menu-bar-mode -1)               ; Disable the menu bar
(scroll-bar-mode -1)             ; Disable the scroll bar
(set-fringe-mode 10)             ; Show small left/right border (which can show things)
(column-number-mode)             ; Show column number in buffer
(set-default-coding-systems 'utf-8)
(windmove-default-keybindings)   ; Enable S-<left/right/up/down> split window navigaion
#+end_src

** Startup performance

#+begin_src emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                     (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)

#+end_src

** Add package sources

#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
(setq use-package-always-defer t)
(setq use-package-verbose t)

;;(unless (package-installed-p 'use-package)
;;  (package-refresh-contents)
;;  (package-install 'use-package))
;;(eval-and-compile
;;  (setq use-package-always-ensure t
;;        use-package-expand-minimally t
;;        use-package-verbose t))
;;
;;(require 'use-package)
;;(setq use-package-verbose t)
#+end_src

** Make sure my custom config doesn't get messed up

#+begin_src emacs-lisp
;; Move customization variables to a separate file and load it
(setq custom-file (locate-user-emacs-file "config/custom.el"))
(load custom-file 'noerror 'nomessage)

;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))
#+end_src

** Move location of Emacs temp files

#+begin_src emacs-lisp
;; https://www.youtube.com/watch?v=XZjyJG-sFZI
;; Use no-littering to automatically set common paths to the new user-emacs-directory
(use-package no-littering
  :demand t)

;; auto save files in the same path as it uses for sessions
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

** Make Emacs remember stuff

#+begin_src emacs-lisp
;; Remember most recently edited files. Usage: M-x recentf-open-files
(recentf-mode 1)

;; Save what you enter into minibuffer prompts. Usage: M-n / M-p
(setq history-length 25)
(savehist-mode 1)

;; Remember and restore the last cursor location of opened files
(save-place-mode 1)
#+end_src

** Get some help

#+begin_src emacs-lisp
;; Get overview of what keybindings are available based on the prefix keys you entered
;; Press C-h in the middle of a key sequence to show which-key buffer
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.3))

(use-package helpful
  :custom
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ("C-h f" . helpful-function)
  ([remap describe-symbol] . helpful-symbol)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-command] . helpful-command)
  ([remap describe-key] . helpful-key))
#+end_src

** Look 'n feel

*** Font
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Fira Code" :height 120)
#+end_src

*** All the icons
#+begin_src emacs-lisp
(use-package all-the-icons
  ;; Needs a manual `M-x all-the-icons-install-fonts`
  :ensure t
  :demand t)
#+end_src

*** Emojify
#+begin_src emacs-lisp
(use-package emojify
  :ensure t
  :hook (after-init . global-emojify-mode))
#+end_src

*** Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :demand t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  (load-theme 'doom-one t))
#+end_src

*** Custom modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 40)
  (setq doom-modeline-buffer-file-name-style 'relative-to-project)
  (setq doom-line-numbers-style 'relative)
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-buffer-state-icon t)
  (setq doom-modeline-major-mode-color-icon t))
#+end_src

** Completion with Ivy

#+begin_src emacs-lisp
(use-package swiper
  :ensure t)

(use-package ivy
  :diminish
  :bind (("C-s" . swiper))
;;         :map ivy-minibuffer-map
;;         ("TAB" . ivy-alt-done)
;;         ("C-f" . ivy-alt-done)
;;         ("C-l" . ivy-alt-done)
;;         ("C-j" . ivy-next-line)
;;         ("C-k" . ivy-previous-line)
;;         :map ivy-switch-buffer-map
;;         ("C-k" . ivy-previous-line)
;;         ("C-l" . ivy-done)
;;         ("C-d" . ivy-switch-buffer-kill)
;;         :map ivy-reverse-i-search-map
;;         ("C-k" . ivy-previous-line)
;;         ("C-d" . ivy-reverse-i-search-kill)
;;	 )
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-wrap t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t))

  ;; Use different regex strategies per completion command
  ;;(push '(completion-at-point . ivy--regex-fuzzy) ivy-re-builders-alist) ;; This doesn't seem to work...
  ;;(push '(swiper . ivy--regex-ignore-order) ivy-re-builders-alist)
  ;;(push '(counsel-M-x . ivy--regex-ignore-order) ivy-re-builders-alist)

  ;; Set minibuffer height for different commands
  ;;(setf (alist-get 'counsel-projectile-ag ivy-height-alist) 15)
  ;;(setf (alist-get 'counsel-projectile-rg ivy-height-alist) 15)
  ;;(setf (alist-get 'swiper ivy-height-alist) 15)
  ;;(setf (alist-get 'counsel-switch-buffer ivy-height-alist) 7))

;;(use-package ivy-hydra
;;  :after hydra)

(use-package ivy-rich
  :after ivy
  :config
  (ivy-rich-mode 1))
;;  :after counsel
;;  :config
;;  (setq ivy-format-function #'ivy-format-function-line)
;;  (setq ivy-rich-display-transformers-list
;;        (plist-put ivy-rich-display-transformers-list
;;                   'ivy-switch-buffer
;;                   '(:columns
;;                     ((ivy-rich-candidate (:width 40))
;;                      (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
;;                      (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
;;                      (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
;;                      (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
;;                     :predicate
;;                     (lambda (cand)
;;                       (if-let ((buffer (get-buffer cand)))
;;                           ;; Don't mess with EXWM buffers
;;                           (with-current-buffer buffer
;;                             (not (derived-mode-p 'exwm-mode)))))))))

(use-package counsel
  :ensure t
  :bind (("M-x" . counsel-M-x)
         ("C-x b" . counsel-ibuffer)
         ("C-x C-f" . counsel-find-file)
         ("C-M-j" . counsel-switch-buffer)
         ("C-M-l" . counsel-imenu)
         :map minibuffer-local-map
         ("C-r" . 'counsel-minibuffer-history))
  :custom
  (counsel-linux-app-format-function #'counsel-linux-app-format-function-name-only)
  :config
  (counsel-mode 1)
  (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^

;;(use-package flx  ;; Improves sorting for fuzzy-matched results
;;  :after ivy
;;  :custom
;;  (ivy-flx-limit 10000))

(use-package wgrep)

(use-package ivy-posframe
  :disabled
  :custom
  (ivy-posframe-width      115)
  (ivy-posframe-min-width  115)
  (ivy-posframe-height     10)
  (ivy-posframe-min-height 10)
  :config
  (setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-frame-center)))
  (setq ivy-posframe-parameters '((parent-frame . nil)
                                  (left-fringe . 8)
                                  (right-fringe . 8)))
  (ivy-posframe-mode 1))

(use-package prescient
  :after counsel
  :config
  (prescient-persist-mode 1))

(use-package ivy-prescient
  :after prescient
  :config
  (ivy-prescient-mode 1))

(use-package all-the-icons-ivy
  :ensure t
  :after ivy)
#+end_src

** File browser (dired)

#+begin_src emacs-lisp
(use-package dired
  :ensure nil ; Built in package so must ensure nil
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump)))

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package dired-single
  :commands (dired dired-jump))
#+end_src

** Org mode

#+begin_src emacs-lisp
(use-package org
  :pin org
  :mode (("\\.org$" . org-mode))
  :custom (org-src-preserve-indentation t))

;; Fancy bullet points
(use-package org-superstar
  :ensure t
  :after org
  :hook (org-mode . org-superstar-mode))
#+end_src

** Projects

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map))

;;(use-package counsel-projectile
;;  :after projectile
;;  :config (counsel-projectile-mode))
#+end_src

** Programming

#+begin_src emacs-lisp
(global-display-line-numbers-mode 1) ; Display line numbers in every buffer
(show-paren-mode 1)                  ; Show matching parens
(setq-default indent-tabs-mode nil)

(use-package smartparens
  :ensure t
  :hook (prog-mode . smartparens-mode))

(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))

;; Utility for jumping to definition in "any" language
(use-package dumb-jump
  :ensure t
  :hook (prog-mode . dumb-jump-mode))

(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
(setq xref-show-definitions-function #'xref-show-definitions-completing-read)

;; In-buffer completion framework
(use-package company
  :ensure t
  :after lsp-mode
  :hook (lsp-mode . company-mode)
  :init
;;  (add-hook 'after-init-hook 'global-company-mode)
  :custom
  (setq company-minimum-prefix-length 3
        company-selection-wrap-around t
        company-tooltip-limit 20
        company-tooltip-minimum-width 15
        company-tooltip-align-annotations t))

(use-package lsp-mode
  :ensure t
  :config
  (setq lsp-idle-delay 0.5
        lsp-enable-symbol-highlighting t)
  :hook
  ((fsharp-mode . lsp)
   (csharp-mode . lsp)
   (lsp-mode . lsp-enable-which-key-integration)))

(use-package lsp-ui
  :ensure t
  :hook (lsp-mode . lsp-ui-mode)
  :config
  (setq lsp-ui-doc-enable t
        lsp-ui-doc-delay 2
        lsp-ui-doc-position 'bottom
        lsp-ui-doc-alignment 'frame
        lsp-ui-doc-header nil
        lsp-ui-doc-include-signature t
        lsp-ui-doc-use-childframe t
;;        lsp-ui-sideline-show-hover t
;;        lsp-ui-sideline-delay 0.5
;;        lsp-ui-sideline-ignore-duplicates t
        )
  :commands lsp-ui-mode)

#+end_src

*** Tree sitter

#+begin_src emacs-lisp
(use-package tree-sitter
  :ensure t
  :after lsp)

(use-package tree-sitter-langs
  :ensure t
  :after tree-sitter)

(use-package tree-sitter-indent
  :ensure t
  :after tree-sitter)
#+end_src

*** F#

#+begin_src emacs-lisp
;;(use-package eglot-fsharp
;;  :hook (fsharp-mode . eglot))

;;(use-package highlight-indentation)

(use-package highlight-indent-guides
  :config
    (setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-responsive 'top)
;;    (setq highlight-indent-guides-auto-odd-face-perc 10)
;;    (setq highlight-indent-guides-auto-even-face-perc 10)
;;    (setq highlight-indent-guides-auto-character-face-perc 20)
  :hook (fsharp-mode . highlight-indent-guides-mode))

(use-package fsharp-mode
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.fsproj\\'" . nxml-mode)))

#+end_src

*** C#

#+begin_src emacs-lisp
(use-package csharp-mode
  :ensure t
  :config
  (electric-pair-local-mode 1)
  (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode))
  (add-to-list 'auto-mode-alist '("\\.csproj\\'" . nxml-mode)))
#+end_src

** JSON

#+begin_src emacs-lisp
(use-package json-mode
  :mode "\\.json\\'")

(use-package flymake-json
  :hook (json-mode . flymake-json-load))
#+end_src

** Git

#+begin_src emacs-lisp
(use-package magit
  :commands magit-status
  :ensure t)

;; TODO: Check out forge (to get issues and PRs in magit buffer)

(use-package git-modes
  :ensure t
  :mode (("\\.gitattributes\\'" . gitattributes-mode)
   ("\\.gitconfig\\'" . gitconfig-mode)
   ("\\.gitignore\\'" . gitignore-mode)))
#+end_src

** Nix

#+begin_src emacs-lisp
(use-package nix-mode
  :ensure t
  :mode "\\.nix\\'")
#+end_src

** IRMA

Invoke M-x tvl-depot-status RET to open Magit in the repo set in tvl-depot-path

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.dotfiles/.emacs.d/tvl")
    (require 'tvl)
  (setq tvl-depot-path "~/work/git/irma")
  (setq tvl-target-branch "master")
  (setq tvl-gerrit-remote "origin")

** Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
