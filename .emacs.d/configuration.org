* Emacs configuration file

** Emacs internal settings

#+begin_src emacs-lisp
(setq inhibit-startup-message t) ; Don't show the splash screen
(tool-bar-mode -1)               ; Disable the tool bar
(menu-bar-mode -1)               ; Disable the menu bar
(scroll-bar-mode -1)             ; Disable the scroll bar
(set-fringe-mode 10)             ; Show small left/right border (which can show things)
(column-number-mode)             ; Show column number in buffer
(blink-cursor-mode 0)
(set-default-coding-systems 'utf-8)
(windmove-default-keybindings)   ; Enable S-<left/right/up/down> split window navigaion
(global-set-key (kbd "C-x C-z") nil) ; Don’t lock emacs when muscle memory wants to do undo
(global-set-key (kbd "C-z") nil)     ; Don’t lock emacs when muscle memory wants to do undo
(setq create-lockfiles nil) ; Don't create stupid lock files, I'm THE user!
(envrc-global-mode t) ;; enable direnv support globally
#+end_src

** Startup performance

#+begin_src emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                     (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)

#+end_src

** Add package sources

#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
  (package-refresh-contents))

(require 'use-package)
(setq use-package-always-ensure t)
(setq use-package-always-defer t)
(setq use-package-verbose t)

#+end_src

** Make sure my custom config doesn't get messed up

#+begin_src emacs-lisp
;; Move customization variables to a separate file and load it
(setq custom-file (locate-user-emacs-file "config/custom.el"))
(load custom-file 'noerror 'nomessage)

;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
(setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
      url-history-file (expand-file-name "url/history" user-emacs-directory))
#+end_src

** Move location of Emacs temp files

#+begin_src emacs-lisp
;; https://www.youtube.com/watch?v=XZjyJG-sFZI
;; Use no-littering to automatically set common paths to the new user-emacs-directory
(use-package no-littering
  :demand t)

;; auto save files in the same path as it uses for sessions
(setq auto-save-file-name-transforms
      `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+end_src

** Keep folders clean

#+begin_src emacs-lisp
(setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
#+end_src

** Make Emacs remember stuff

#+begin_src emacs-lisp
;; Remember most recently edited files. Usage: M-x recentf-open-files
(recentf-mode 1)

;; Save what you enter into minibuffer prompts. Usage: M-n / M-p
(setq history-length 25)
(savehist-mode 1)

;; Remember and restore the last cursor location of opened files
(save-place-mode 1)
#+end_src

** Get some help

#+begin_src emacs-lisp
;; Get overview of what keybindings are available based on the prefix keys you entered
;; Press C-h in the middle of a key sequence to show which-key buffer
(use-package which-key
  :defer 0
  :diminish which-key-mode
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.3))

(use-package helpful
  :custom
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ("C-h f" . helpful-function)
  ([remap describe-symbol] . helpful-symbol)
  ([remap describe-variable] . helpful-variable)
  ([remap describe-command] . helpful-command)
  ([remap describe-key] . helpful-key))
#+end_src

** Look 'n feel

*** Font
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "Jetbrains Mono" :height 110)
#+end_src

*** All the icons
#+begin_src emacs-lisp
(use-package all-the-icons
  ;; Needs a manual `M-x all-the-icons-install-fonts`
  :ensure t
  :demand t)
#+end_src

*** Emojify
#+begin_src emacs-lisp
(use-package emojify
  :ensure t
  :hook (after-init . global-emojify-mode))
#+end_src

*** Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :demand t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config)
  (load-theme 'doom-gruvbox t))
#+end_src

*** Custom modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 40)
  (setq doom-modeline-buffer-file-name-style 'relative-to-project)
  (setq doom-line-numbers-style 'relative)
  (setq doom-modeline-major-mode-icon t)
  (setq doom-modeline-buffer-state-icon t)
  (setq doom-modeline-major-mode-color-icon t))
#+end_src

** Completion

#+begin_src emacs-lisp
;; Replaces native buffer switching and search default functions
(use-package consult
  :ensure t
  :custom
  (consult-project-function
   (lambda (_)
     (if (boundp 'projectile-project-root)
         (projectile-project-root) "/" )))
  :bind
  ("C-s" . consult-line)
  ("C-M-j" . consult-buffer))

(use-package savehist
  :ensure t
  :init
  (savehist-mode))

;; Injects extra context in a new column
(use-package marginalia
  :ensure t
  :init
  (marginalia-mode))

;; Fuzzy completion eveywhere
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic)))

;; Minibuffer completion popup
(use-package vertico
  :ensure t
  :init
  (vertico-mode))

;; Show completions in my face
(use-package vertico-posframe
  :ensure t
  :config
  (vertico-posframe-mode t))

#+end_src

** File browser (dired)

#+begin_src emacs-lisp
(use-package dired
  :ensure nil ; Built in package so must ensure nil
  :custom ((dired-listing-switches "-agho --group-directories-first"))
  :commands (dired dired-jump)
  :bind (("C-x C-j" . dired-jump)))

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

;; (use-package dired-single
;;  :commands (dired dired-jump))
#+end_src

** Org mode

#+begin_src emacs-lisp
(use-package org
  :pin org
  :mode (("\\.org$" . org-mode))
  :custom (org-src-preserve-indentation t))

;; Fancy bullet points
(use-package org-superstar
  :ensure t
  :after org
  :hook (org-mode . org-superstar-mode))
#+end_src

** Projects

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :config (projectile-global-mode)
  :custom
  (projectile-switch-project-action 'projectile-dired)
  (projectile-globally-ignored-directories '(".git"))
  (projectile-dirconfig-file ".gitignore")
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :bind
  (:map projectile-command-map
        ("SPC" . projectile-find-file)
        ("r" . consult-ripgrep)))
#+end_src

** Programming

#+begin_src emacs-lisp
(global-display-line-numbers-mode 1) ; Display line numbers in every buffer
(show-paren-mode 1)                  ; Show matching parens
(setq-default indent-tabs-mode nil)

(use-package emacs
  :config
  ;; (add-hook 'before-save-hook 'whitespace-cleanup) ;; breaks jinja mode for some reason
  ;; (add-hook 'prog-mode-hook 'hl-line-mode)
  ;; (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  ;; (add-hook 'prog-mode-hook 'display-line-numbers-mode)
  ;; (add-hook 'prog-mode-hook 'show-paren-mode)
  ;; (add-hook 'prog-mode-hook 'rainbow-mode)
  ;; (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)

  ;; enable jump to definition even when lsp is not enabled
;;  (add-hook 'xref-backend-functions #'dumb-jump-xref-activate) ;

  :custom
  ;; Use tree-sitter modes for various languages.
  (major-mode-remap-alist
   '((bash-mode . bash-ts-mode)
     (csharp-mode . csharp-ts-mode)
     (json-mode . json-ts-mode)
     (python-mode . python-ts-mode)
     (nix-mode . nix-ts-mode)
     (rust-mode . rust-ts-mode)
     (toml-mode . toml-ts-mode)
     (yaml-mode . yaml-ts-mode))))

(use-package smartparens
  :ensure t
  :hook (prog-mode . smartparens-mode))

(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))

;; Utility for jumping to definition in "any" language
;;(use-package dumb-jump
;;  :ensure t
;;  :hook (prog-mode . dumb-jump-mode))
;;
;;(add-hook 'xref-backend-functions #'dumb-jump-xref-activate)
;;(setq xref-show-definitions-function #'xref-show-definitions-completing-read)

(use-package multiple-cursors
  :ensure t
  :bind (("C-S-c C-S-c" . 'mc/edit-lines)
         ("C->" . 'mc/mark-next-like-this)
         ("C-<" . 'mc/mark-previous-like-this)
         ("C-c C-<" . 'mc/mark-all-like-this)))

(use-package flycheck
  :ensure t
  :after eglot
  :config (global-flycheck-mode 1))

(use-package flycheck-eglot
  :ensure t
  :after (flycheck eglot)
  :config
  (global-flycheck-eglot-mode 1))

;; Enable auto-completion
(use-package corfu
  :config
  (setq corfu-auto t)
  (setq corfu-popupinfo-mode t)
  :init
  (global-corfu-mode))

;; File dabbrev & path extensions
(use-package cape
  :config
  (add-to-list 'completion-at-point-functions #'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file))

(use-package eglot
  :ensure t
  :custom
  (eglot-autoshutdown t)
  :hook
  ((fsharp-mode . eglot-ensure)
   (csharp-ts-mode . eglot-ensure)))

#+end_src

*** F#

#+begin_src emacs-lisp
;; (use-package eglot-fsharp
;;  :ensure t
;;  :hook (fsharp-mode . eglot))

;;(use-package highlight-indentation)

(use-package highlight-indent-guides
  :config
    (setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-responsive 'top)
;;    (setq highlight-indent-guides-auto-odd-face-perc 10)
;;    (setq highlight-indent-guides-auto-even-face-perc 10)
;;    (setq highlight-indent-guides-auto-character-face-perc 20)
  :hook (fsharp-mode . highlight-indent-guides-mode))

(use-package fsharp-mode
  :ensure t
  :init (require 'eglot-fsharp)
  :config
  (add-to-list 'auto-mode-alist '("\\.fsproj\\'" . nxml-mode)))

#+end_src

*** C#

#+begin_src emacs-lisp
;; (use-package csharp-mode
;;   :ensure t
;;   :config
;;   (electric-pair-local-mode 1)
;; ;;  (add-to-list 'auto-mode-alist '("\\.cs\\'" . csharp-tree-sitter-mode))
;;   (add-to-list 'auto-mode-alist '("\\.csproj\\'" . nxml-mode)))
#+end_src

*** Rust

#+begin_src emacs-lisp
(use-package rust-ts-mode
  :defer t
  :ensure t
  :config
  (add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-ts-mode))
  (setq rust-format-on-save t)
  :hook
  (rust-mode . eglot-ensure)
  (rust-ts-mode . eglot-ensure))
#+end_src

** JSON

#+begin_src emacs-lisp
(use-package json-ts-mode
  :mode "\\.json\\'")

(use-package flymake-json
  :hook (json-mode . flymake-json-load))
#+end_src

** Git

#+begin_src emacs-lisp
(use-package magit
  :commands magit-status
  :ensure t)

;; TODO: Check out forge (to get issues and PRs in magit buffer)

(use-package git-modes
  :ensure t
  :mode (("\\.gitattributes\\'" . gitattributes-mode)
   ("\\.gitconfig\\'" . gitconfig-mode)
   ("\\.gitignore\\'" . gitignore-mode)))
#+end_src

** Nix

#+begin_src emacs-lisp
(use-package nix-ts-mode
  :ensure t
  :mode "\\.nix\\'")
#+end_src

** IRMA

Invoke M-x tvl-depot-status RET to open Magit in the repo set in tvl-depot-path

#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.dotfiles/.emacs.d/tvl")
    (require 'tvl)
  (setq tvl-depot-path "~/work/git/irma")
  (setq tvl-target-branch "master")
  (setq tvl-gerrit-remote "origin")
#+end_src

** Runtime Performance

Dial the GC threshold back down so that garbage collection happens more frequently but in less time.

#+begin_src emacs-lisp
;; Make gc pauses faster by decreasing the threshold.
(setq gc-cons-threshold (* 2 1000 1000))
#+end_src
